@page "/Market/MarketMain"
@using System.Collections.Concurrent
@using ApiServerWarframe.Services.Storage.MemoryStorage
@using Warf_MAUI.Shared.Common.BM25
@using Warf_MAUI.Shared.Common.Extensions
@using Warf_MAUI.Shared.Common.Models
@using Warf_MAUI.Shared.Common.Notifications
@using Warf_MAUI.Shared.Common.Search.Models
@using Warf_MAUI.Shared.Common.WebAPI.Storage.MemoryStorage
@using Warf_MAUI.Shared.Common.WebAPI.WebClients
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models.Enums
@using Warf_MAUI.Shared.Services.Warf_MAUI.Services


<div class="uk-panel-box uk-border-rounded uk-padding">
    <div class="uk-panel-box-primary uk-border-rounded uk-width-1-3 uk-container-center uk-position-relative">
        <input class="uk-search-field uk-width-1-1"
               type="search"
               placeholder="Поиск..."
               @bind="SearchText"
               @bind:event="oninput"
               autocomplete="off">

        @if (filteredItems.Any())
        {
            <div class="uk-panel-box-secondary uk-border-rounded uk-box-shadow-medium
                uk-position-absolute uk-width-1-1
                uk-animation-scale-up uk-transform-origin-top-center
                uk-padding-small" style="z-index: 1000;">

                <ul class="uk-list uk-grid-small uk-child-width-1-2@m uk-child-width-1-1@s uk-grid-match uk-list-divider custom-list"  uk-grid>
                    @foreach (var item in filteredItems)
                    {
                        <li class="uk-padding-small uk-transition-toggle list-item"
                            @onclick="() => SelectItem(item)">
                            <Warf_MAUI.Shared.Components.Item.SearchItemCard Item="item" />
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>
<div class="uk-child-width-small uk-margin-top uk-margin-remove-left uk-padding uk-column-1-2" uk-grid>

    @* сюда те что на покупку *@
    <div class="uk-panel-box uk-border-rounded">
        <div>
            <table class="uk-table uk-table-hover uk-table-striped uk-table-condensed uk-table-responsive">
                <caption>
                </caption>
                <thead>
                    <tr>
                        <th>
                            Изображение
                        </th>
                        <th>
                            Название
                        </th>
                        <th>
                            Цена покупки
                        </th>
                        <th>
                            Цена продажи
                        </th>
                        <th>
                            Разница цен
                        </th>
                        <th>
                            Действия
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var Item in shownItems)
                    {
                        <tr class="">
                            <td>
                                <img class="uk-margin-small-right"
                                     src="@GetImage.GetItemImageUrl(Item)"
                                     alt="@Item.Name" width="48" height="48" />
                            </td>
                            <td>
                                <div class="uk-text-bold uk-text-truncate item-name">@Item.Name</div>

                                @if (!string.IsNullOrWhiteSpace(Item.Subtype))
                                {
                                    <div class="uk-text-meta">Подтип: @Item.Subtype</div>
                                }

                                @if (Item.Rank != null)
                                {
                                    <div class="uk-text-muted">Ранг: @Item.Rank</div>
                                }
                            </td>
                            <td>
                                тест цена покупки
                            </td>
                            <td>
                                тест цена продажи
                            </td>
                            <td>
                                тест разница
                            </td>
                            <td>
                                <div>
                                    <button class="uk-button uk-button-primary uk-button-small uk-margin-small-right">
                                        Купил
                                    </button>
                                    <button class="uk-button uk-button-secondary uk-button-small" @onclick="() => RemoveItemFromBuyList(Item)">
                                        Удалить
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @* сюда те что на продажу *@
    <div class="uk-panel-box uk-border-rounded">

    </div>
</div>

<style>
.custom-list {
    max-height: 60vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #aaa transparent;
}

/* hover эффект для всего li */
.list-item {
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
    border-top: 0px !important;
}

.list-item:hover {
    background-color: rgba(255, 255, 255, 0.08);
    transform: translateY(-2px);
}

/* убираем стандартные отступы у li */
.list-item img {
    flex-shrink: 0;
}

/* адаптивная высота и прокрутка */
.custom-list::-webkit-scrollbar {
    width: 6px;
}

.custom-list::-webkit-scrollbar-thumb {
    background-color: #aaa;
    border-radius: 3px;
}

.border-remove {

}

</style>

@inject MemoryCacheService _memory;
@inject CombinedApiClient _apiClient;
@inject WarframeMarketService MarketService;
@inject INotificationController notifyController;
@inject IJSRuntime jsRuntime;

@code {
    private string searchText = string.Empty;
    private List<SearchItem> allItems = new();
    private List<MarketItem> shownItems = new();
    private List<SearchItem> filteredItems = new();

    private BM25Searcher<SearchItem> _bm25Searcher = new();
    private CancellationTokenSource _searchFieldCancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(async () => await Init());
    }

    private async Task Init()
    {
        await LoadOrders();
        await LoadItemsFromApi();
        await InitializeSearch();
    }

    private async Task LoadOrders()
    {
        var orders = _memory.GetDictionary<string,SearchItem>(MemoryNameProvider.BuyOrders);
        if (orders != null && orders.Count > 0)
        {
            shownItems.AddRange(orders.Values);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadItemsFromApi()
    {
        var res = await _apiClient.My.GetDetailsAsync();

        var converted = ConvertItemsForSearch(res).ToList();
        allItems = converted;

    }

    private void Notify(string message, NotifyType type = NotifyType.primary, NotifyPosition pos = NotifyPosition.TopRight, int timeout = 500)
    {
        notifyController.NotifyApplication(jsRuntime, message, type, pos, timeout);
    }

    private IEnumerable<SearchItem> ConvertItemsForSearch(IEnumerable<ItemShort> items)
    {
        var searchItems = new ConcurrentBag<SearchItem>();

        // Partitioner разбивает данные на блоки для более эффективной параллели
        var rangePartitioner = Partitioner.Create(items);

        Parallel.ForEach(rangePartitioner, () => new List<SearchItem>(), (i, loopState, localList) =>
        {
            var existRank = i.MaxRank.HasValue;
            var existSubtype = i.Subtypes != null;
            var icon = i.I18n.First().Value.Icon!;
            var subIcon = i.I18n.First().Value.SubIcon!;

            if (existRank)
            {
                localList.Add(new SearchItem { Id = i.Id, slug = i.Slug, Name = i.Name, Icon = icon, Rank = i.MaxRank!.Value, Tags = i.Tags!, SubIcon = subIcon });
                localList.Add(new SearchItem { Id = i.Id, slug = i.Slug, Name = i.Name, Icon = icon, Rank = 0, Tags = i.Tags!, SubIcon = subIcon });
            }
            else if (existSubtype)
            {
                foreach (var subtype in i.Subtypes!)
                    localList.Add(new SearchItem { Id = i.Id, slug = i.Slug, Name = i.Name, Icon = icon, Subtype = subtype, Tags = i.Tags!, SubIcon = subIcon });
            }
            else
            {
                localList.Add(new SearchItem { Id = i.Id, slug = i.Slug, Name = i.Name, Icon = icon, Tags = i.Tags!, SubIcon = subIcon });
            }

            return localList;
        },
        localList => { foreach (var si in localList) searchItems.Add(si); });

        return searchItems;
    }

    private async Task InitializeSearch()
    {
        _bm25Searcher.Clear();
        await _bm25Searcher.AddItems(allItems);
    }

    private async Task OnSearchFieldInput(string query)
    {
        await _searchFieldCancellationTokenSource.CancelAsync();
        _searchFieldCancellationTokenSource = new();

        await Task.Delay(150);
        if (_searchFieldCancellationTokenSource.IsCancellationRequested) return;
        await Task.Delay(500);

        if (string.IsNullOrWhiteSpace(query))
        {
            filteredItems.Clear();
            await InvokeAsync(StateHasChanged);
            return;
        }


        var results = await _bm25Searcher.Search(query);
        filteredItems = results.Take(10).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveItemFromBuyList(SearchItem item)
    {
        shownItems.Remove(item);
        Notify($"{item.Name} удален",NotifyType.success ,pos: NotifyPosition.TopLeft, timeout: 1000);
    }

    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            _ = OnSearchFieldInput(value);
        }
    }

    private void SelectItem(SearchItem item)
    {
        if(shownItems.Contains(item))
        {
            Notify("Этот предмет уже есть", NotifyType.warning);
            return;
        }
        searchText = string.Empty;
        filteredItems.Clear();
        shownItems.Add(item); // показать выбранный
        var marketitem = new MarketItem();
        marketitem.Id = item.Id;
        marketitem.Name = item.Name;
        marketitem.UrlName = item.slug;
        marketitem.ModRank = item.Rank;
        marketitem.Subtype = item.Subtype;
        _ = MarketService.CreateBuyOrder(marketitem);
        _memory.AddOrUpdateInDictionary(MemoryNameProvider.BuyOrders, item.Id, item);
    }
}