@page "/Market/MarketMain"
@using Warf_MAUI.Shared.Common.BM25
@using Warf_MAUI.Shared.Common.Search.Models
@using Warf_MAUI.Shared.Common.WebAPI.WebClients
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models.Enums

@inject CombinedApiClient _apiClient;

<div class="uk-panel-box uk-border-rounded uk-padding">
    <div class="uk-panel-box-primary uk-border-rounded uk-width-1-3 uk-container-center uk-position-relative">
        <input class="uk-search-field uk-width-1-1"
               type="search"
               placeholder="Поиск..."
               @bind="SearchText"
               @bind:event="oninput"
               autocomplete="off">

        @if (filteredItems.Any())
        {
            <div class="uk-panel-box-secondary uk-border-rounded uk-box-shadow-medium
                uk-position-absolute uk-width-1-1
                uk-animation-scale-up uk-transform-origin-top-center
                uk-padding-small" style="z-index: 1000;">

                <ul class="uk-list uk-grid-small uk-child-width-1-2@m uk-child-width-1-1@s uk-grid-match uk-list-divider custom-list" uk-grid>
                    @foreach (var item in filteredItems)
                    {
                        <li class="uk-padding-small uk-border-rounded uk-transition-toggle list-item"
                            @onclick="() => SelectItem(item)">

                            <div class="uk-flex uk-flex-middle">
                                <img class="uk-border-circle uk-margin-small-right"
                                     src="@GetItemImageUrl(item)"
                                     alt="@item.Name" width="48" height="48" />

                                <div class="uk-flex-1">
                                    <div class="uk-text-bold uk-text-truncate item-name">@item.Name</div>

                                    @if (!string.IsNullOrWhiteSpace(item.Subtype))
                                    {
                                        <div class="uk-text-meta">Подтип: @item.Subtype</div>
                                    }

                                    @if (item.Rank != null)
                                    {
                                        <div class="uk-text-muted">Ранг: @item.Rank</div>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>
<div class="uk-child-width-small uk-margin-top uk-margin-remove-left uk-padding uk-column-1-2" uk-grid>
    <div class="uk-panel-box uk-border-rounded">
        <ul class="uk-grid-small uk-grid-match uk-first-column" uk-grid>
            @foreach (var item in shownItems)
            {
                <li class="uk-width-1-6">
                    <span>@item.Name</span>
                </li>
            }
        </ul>
    </div>
    <div class="uk-panel-box uk-border-rounded">

    </div>
</div>
<style>
.custom-list {
    max-height: 60vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #aaa transparent;
}

    .item-name {
        white-space: normal; /* разрешаем перенос */
        word-break: break-word; /* переносим длинные слова */
        overflow-wrap: anywhere; /* переносим даже без пробелов */
        line-height: 1.3;
    }

/* hover эффект для всего li */
.list-item {
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
}

.list-item:hover {
    background-color: rgba(255, 255, 255, 0.08);
    transform: translateY(-2px);
}

/* убираем стандартные отступы у li */
.list-item img {
    flex-shrink: 0;
}

/* адаптивная высота и прокрутка */
.custom-list::-webkit-scrollbar {
    width: 6px;
}

.custom-list::-webkit-scrollbar-thumb {
    background-color: #aaa;
    border-radius: 3px;
}
</style>
@code {
    private string searchText = string.Empty;
    private List<SearchItem> allItems = new();
    private List<SearchItem> shownItems = new();
    private List<SearchItem> filteredItems = new();

    private BM25Searcher<SearchItem> _bm25Searcher = new();
    private CancellationTokenSource _searchFieldCancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromApi();
        await InitializeSearch();
    }

    private string GetItemImageUrl(SearchItem item)
    {
        if (item == null)
            return "_content/Warf_MAUI.Shared/svg/ducat_light.svg"; // Default image if itemShort is null
        if (item.ImageUrl == null)
            return "_content/Warf_MAUI.Shared/svg/ducat_light.svg";

        return "https://warframe.market/static/assets/" + item.ImageUrl;
    }

    private async Task LoadItemsFromApi()
    {
        var res = await _apiClient.My.GetDetailsAsync();

        allItems = ConvertItemsForSearch(res).ToList();
    }

    private IEnumerable<SearchItem> ConvertItemsForSearch(IEnumerable<ItemShort> items)
    {
        var searchItems = new List<SearchItem>();
        foreach(var i in items)
        {
            var existRank = i.MaxRank.HasValue;
            var existSubtype = i.Subtypes!= null;
            if(existRank)
            {
                var searchItemMaxR = new SearchItem() { 
                    Id = i.Id,
                    slug = i.Slug,
                    Name = i.Name,
                    ImageUrl = i.I18n.First().Value.Icon,
                    Rank = i.MaxRank.Value
                };
                searchItems.Add(searchItemMaxR);

                var searchItemMinR = new SearchItem(){
                    Id = i.Id,
                    slug = i.Slug,
                    Name = i.Name,
                    ImageUrl = i.I18n.First().Value.Icon,
                    Rank = 0
                };
                searchItems.Add(searchItemMinR);
            }
            else if(existSubtype)
            {
                foreach(var subtype in i.Subtypes)
                {
                    var searchItem = new SearchItem()
                    {
                        Id = i.Id,
                        slug = i.Slug,
                        Name = i.Name,
                        ImageUrl = i.I18n.First().Value.Icon,
                        Subtype = subtype
                    };
                    searchItems.Add(searchItem);
                }
            }
            else
            {
                var searchItem = new SearchItem()
                {
                    Id = i.Id,
                    slug = i.Slug,
                    Name = i.Name,
                    ImageUrl = i.I18n.First().Value.Icon,
                };
                searchItems.Add(searchItem);
            }
        }
        return searchItems;
    }

    private async Task InitializeSearch()
    {
        _bm25Searcher.Clear();
        await _bm25Searcher.AddItems(allItems);
    }

    private async Task OnSearchFieldInput(string query)
    {
        await _searchFieldCancellationTokenSource.CancelAsync();
        _searchFieldCancellationTokenSource = new();

        await Task.Delay(150);
        if (_searchFieldCancellationTokenSource.IsCancellationRequested) return;
        await Task.Delay(500);

        if (string.IsNullOrWhiteSpace(query))
        {
            filteredItems.Clear();
            await InvokeAsync(StateHasChanged);
            return;
        }


        var results = await _bm25Searcher.Search(query);
        filteredItems = results.Take(10).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            _ = OnSearchFieldInput(value);
        }
    }

    private void SelectItem(SearchItem item)
    {
        searchText = string.Empty;
        filteredItems.Clear();
        shownItems.Add(item); // показать выбранный
    }
}