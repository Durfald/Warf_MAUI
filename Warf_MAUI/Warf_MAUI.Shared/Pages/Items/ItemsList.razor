@page "/Items/ItemsList"
@using Warf_MAUI.Shared.Common.BM25
@using Warf_MAUI.Shared.Common.Mock
@using Warf_MAUI.Shared.Common.Filters
@using Warf_MAUI.Shared.Common.WebAPI.WebClients
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models
@using Warf_MAUI.Shared.Common.WebAPI.WebClients.MyWarframeApiClient.Models.Enums
@using Warf_MAUI.Shared.Components.Elements

@inject CombinedApiClient _apiClient;

<div>
    <div class="uk-margin uk-flex uk-flex-between uk-flex-wrap">
        <div>
        </div>
        <div class="uk-flex uk-flex-row">
            <div class="uk-panel-box-primary uk-border-rounded uk-margin-right">
                <input class="uk-search-field" type="search" placeholder="Поиск..."
                       autocomplete="off" @oninput="OnSearchFieldInput">
            </div>
            <div class="uk-inline">
                <button class="uk-button uk-button-primary uk-border-rounded" type="button"><i class="fa-solid fa-filter"></i></button>
                <div class="uk-dropbar uk-dropbar-top uk-panel-box-primary wa-search-body-decorations" uk-drop>
                    <div class="background uk-display-block wa-search-body">
                        <p class="uk-card-title">Фильтры</p>
                        <div>
                            <Label For="() => _itemFilter.BuyValueStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.BuyValueStart" />
                            <Label For="() => _itemFilter.BuyValueEnd" />
                            <input type="number" @bind="_itemFilter.BuyValueEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.SellValueStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.SellValueStart" />
                            <Label For="() => _itemFilter.SellValueEnd" />
                            <input type="number" @bind="_itemFilter.SellValueEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.ProfitStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.ProfitStart" />
                            <Label For="() => _itemFilter.ProfitEnd" />
                            <input type="number" @bind="_itemFilter.ProfitEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Rank" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.Rank" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Tax" />
                            <input @bind="_itemFilter.Tax" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Trend" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.Trend" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Use90Days" />
                            <label>
                                <input type="checkbox" @bind="_itemFilter.Use90Days" />
                                90 дней
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="uk-panel-box full-space uk-border-rounded">
        <ul class="uk-grid-small uk-grid-match" uk-grid>

            @for (int i = 0; i < _sortedItems.Count; i++)
            {
                @* _content/Warf_MAUI.Shared/svg/ducat_light.svg *@
                int index = i;
                <li class="uk-width-1-6 ">
                    <Warf_MAUI.Shared.Components.Item.ItemCard Item="_sortedItems[index]" @key="_sortedItems[index].Id" />
                </li>
            }
        </ul>
    </div>
</div>

@implements IDisposable
@code {
#pragma warning disable CS1998
    protected override async Task OnInitializedAsync()
    {
        // _loadedItems = MockItemList.GenerateDemoItems(50);
        // _ = AddItemsToSearch(_loadedItems);
        // _sortedItems = _loadedItems.ToList(); //копирование для сортировки
        _ = Task.Run(async () => await FillItems());
    }

    // private List<Item> _loadedItems = [];
    private List<Item> _sortedItems = [];
    private SortedItemsResult _loadedApiItems = new();

    #region SearchFields

    private ItemFilter _itemFilter = new ItemFilter();
    private CancellationTokenSource _addManyItemsCancellationTokenSource = new();
    private CancellationTokenSource _searchFieldCancellationTokenSource = new();
    private BM25Searcher<Item> _BM25Searcher90 = new();
    private BM25Searcher<Item> _BM25Searcher48 = new();


    private async Task AddItemsToSearch(IEnumerable<Item> items90, IEnumerable<Item> items48)
    {
        _BM25Searcher48.Clear();
        _BM25Searcher90.Clear();
        await _addManyItemsCancellationTokenSource.CancelAsync();
        _addManyItemsCancellationTokenSource = new();
        await _BM25Searcher90.AddItems(items90, _addManyItemsCancellationTokenSource.Token);
        await _BM25Searcher48.AddItems(items48, _addManyItemsCancellationTokenSource.Token);

        _itemFilter.PropertyChanged -= OnFilterPropertyChanged;
        _itemFilter.PropertyChanged += OnFilterPropertyChanged;
    }

    private async Task ApplyFilter(string query)
    {
        await _searchFieldCancellationTokenSource.CancelAsync();
        _searchFieldCancellationTokenSource = new();

        await Task.Delay(150);
        if (_searchFieldCancellationTokenSource.IsCancellationRequested) return;
        await Task.Delay(500);

        await RebuildListsAsync(query);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchFieldInput(ChangeEventArgs args)
    {
        if (args.Value is string query)
        {
            await ApplyFilter(query);
            _itemFilter.SetNameQuery(query);
        }
    }

    #endregion SearchFields

    private async Task LoadItemsFromApi()
    {
        var res = await _apiClient.My.GetSortedItemsAsync();
        _loadedApiItems = res;
    }

    private async Task RebuildListsAsync(string query = "")
    {
        var baseList = _itemFilter.Use90Days ? _loadedApiItems.Last90Days : _loadedApiItems.Last48Hours;

        List<Item> list;
        if (!string.IsNullOrEmpty(query))
            list = _itemFilter.Use90Days ? await _BM25Searcher90.Search(query) : await _BM25Searcher48.Search(query);
        else
            list = baseList.ToList();

        _sortedItems = _itemFilter.Apply(list.AsQueryable());
    }

    private async Task FillItems()
    {
        await LoadItemsFromApi();
        await AddItemsToSearch(_loadedApiItems.Last90Days, _loadedApiItems.Last48Hours);
        await RebuildListsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void OnFilterPropertyChanged(string query)
    {
        _ = ApplyFilter(query);
    }

    void IDisposable.Dispose()
    {
        _itemFilter.PropertyChanged -= OnFilterPropertyChanged;
    }
}
