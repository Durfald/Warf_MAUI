@page "/Items/ItemsList"
@using Warf_MAUI.Shared.Common.BM25
@using Warf_MAUI.Shared.Common.Mock
<div>
    <div class="uk-margin uk-flex uk-flex-between uk-flex-wrap">
        <div>
        </div>
        <div class="uk-flex uk-flex-row">
            <div class="uk-panel-box-primary border-radius">
                <input class="uk-search-field" type="search" placeholder="Поиск..."
                       autocomplete="off" @oninput="OnSearchFieldInput">
            </div>

            <div class="uk-inline">
                <button class="uk-button uk-button-primary border-radius" type="button"><i class="fa-solid fa-filter"></i></button>
                <div class="uk-panel-box-primary" uk-drop><div class="background"></div></div>
            </div>
        </div>
    </div>
    <div class="uk-panel-box full-space border-radius">
        <ul class="uk-grid-small uk-grid-match" uk-grid>

            @for (int i = 0; i < _sortedItems.Count; i++)
            {
                int index = i;
                <li class="uk-width-1-6">
                    <div class="uk-panel-box-primary">

                        <h3 class="uk-card-title uk-text-center uk-text-top">@_sortedItems[index].Name</h3>
                        <img class="uk-align-center" src="_content/Warf_MAUI.Shared/svg/ducat_light.svg" alt="Item @i" width="64" height="64">
                        <div class="uk-text-center">
                            <p class="uk-text-normal">Цена покупки: @_sortedItems[index].BuyValue</p>
                            <p class="uk-text-normal">Цена продажи: @_sortedItems[index].SellValue</p>
                            <p class="uk-text-normal">Разница: @_sortedItems[index].Profit</p>
                            <p class="uk-text-normal">Ранг: @_sortedItems[index].Rank</p>
                            <p class="uk-text-normal">Налог на торговлю: @_sortedItems[index].Tax</p>
                            <p class="uk-text-normal">тренд цены: @_sortedItems[index].Trend</p>
                            <p class="uk-margin-left">90 дней: @_sortedItems[index].ThreeMonthMetric</p>
                            <p class="uk-margin-left">2 дня: @_sortedItems[index].TwoDayMetric</p>
                        </div>
                    </div>
                </li>
            }

        </ul>
    </div>
</div>

@code {
#pragma warning disable CS1998
    protected override async Task OnInitializedAsync()
    {
        _loadedItems = MockItemList.GenerateDemoItems(150);
        _ = AddItemsToSearch(_loadedItems);
        _sortedItems = _loadedItems.ToList(); // копирование для сортировки
    }

#pragma warning restore

    private List<DemoItem> _loadedItems = [];
    private List<DemoItem> _sortedItems = [];

    #region SearchFields
    private CancellationTokenSource _addManyItemsCancellationTokenSource = new();
    private CancellationTokenSource _searchFieldCancellationTokenSource = new();
    private BM25Searcher<DemoItem> demoItemMB25Searcher = new();

    private async Task AddItemsToSearch(IEnumerable<dynamic> items)
    {
        await _addManyItemsCancellationTokenSource.CancelAsync();
        _addManyItemsCancellationTokenSource = new();
        await demoItemMB25Searcher.AddItems(_loadedItems, _addManyItemsCancellationTokenSource.Token);
    }
    #endregion

    private async Task OnSearchFieldInput(ChangeEventArgs args)
    {
        await _searchFieldCancellationTokenSource.CancelAsync();
        _searchFieldCancellationTokenSource = new();

        await Task.Delay(150);
        if (_searchFieldCancellationTokenSource.IsCancellationRequested)
            return;
        await Task.Delay(500);

        if (args.Value is string query)
        {
            if (string.IsNullOrWhiteSpace(query))
                _sortedItems = _loadedItems.ToList();
            else
                _sortedItems = await demoItemMB25Searcher.Search(query);
        }
    }
}
