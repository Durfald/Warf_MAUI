@page "/Items/ItemsList"
@using Warf_MAUI.Shared.Common.BM25
@using Warf_MAUI.Shared.Common.Mock
@using Warf_MAUI.Shared.Common.Filters
@using Warf_MAUI.Shared.Components.Elements

<div>
    <div class="uk-margin uk-flex uk-flex-between uk-flex-wrap">
        <div>
        </div>
        <div class="uk-flex uk-flex-row">
            <div class="uk-panel-box-primary border-radius uk-margin-right">
                <input class="uk-search-field" type="search" placeholder="Поиск..."
                       autocomplete="off" @oninput="OnSearchFieldInput">
            </div>

            <div class="uk-inline">
                <button class="uk-button uk-button-primary border-radius" type="button"><i class="fa-solid fa-filter"></i></button>
                <div class="uk-dropbar uk-dropbar-top uk-panel-box-primary wa-search-body-decorations" uk-drop>
                    <div class="background uk-display-block wa-search-body">
                        <p class="uk-card-title">Фильтры</p>
                        <div>
                            <Label For="() => _itemFilter.BuyValueStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.BuyValueStart" />
                            <Label For="() => _itemFilter.BuyValueEnd" />
                            <input type="number" @bind="_itemFilter.BuyValueEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.SellValueStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.SellValueStart" />
                            <Label For="() => _itemFilter.SellValueEnd" />
                            <input type="number" @bind="_itemFilter.SellValueEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.ProfitStart" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.ProfitStart" />
                            <Label For="() => _itemFilter.ProfitEnd" />
                            <input type="number" @bind="_itemFilter.ProfitEnd" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Rank" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.Rank" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Tax" />
                            <input @bind="_itemFilter.Tax" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.Trend" />
                            <input type="number" min="0" step="1" @bind="_itemFilter.Trend" />
                        </div>

                        <div>
                            <Label For="() => _itemFilter.MetricType" />
                            <select @onchange="arg => _itemFilter.TrySetMetricByIndex(arg.Value)">
                                <option value="@ItemFilter.GetValueOfMetricType(ItemFilter.Metric.TwoDay)">
                                    @ItemFilter.GetNameForMetricType(ItemFilter.Metric.TwoDay)
                                </option>
                                <option value="@ItemFilter.GetValueOfMetricType(ItemFilter.Metric.ThreeMonth)">
                                    @ItemFilter.GetNameForMetricType(ItemFilter.Metric.ThreeMonth)
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="uk-panel-box full-space border-radius">
        <ul class="uk-grid-small uk-grid-match" uk-grid>

            @for (int i = 0; i < _sortedItems.Count; i++)
            {
                int index = i;
                <li class="uk-width-1-6 ">
                    <div class="uk-panel-box-primary border-radius">
                        <h3 class="uk-card-title uk-text-center uk-text-top">@_sortedItems[index].Name</h3>
                        <img class="uk-align-center" src="_content/Warf_MAUI.Shared/svg/ducat_light.svg" alt="Item @i" width="64" height="64">
                        <div class="uk-margin-left">
                            <table class="uk-table uk-table-small uk-table-divider">
                                <tbody>
                                    <tr>
                                        <td>Цена покупки:</td>
                                        <td>@_sortedItems[index].BuyValue</td>
                                    </tr>
                                    <tr>
                                        <td>Цена продажи:</td>
                                        <td>@_sortedItems[index].SellValue</td>
                                    </tr>
                                    <tr>
                                        <td>Разница:</td>
                                        <td>@_sortedItems[index].Profit</td>
                                    </tr>
                                    <tr>
                                        <td>Ранг:</td>
                                        <td>@_sortedItems[index].Rank</td>
                                    </tr>
                                    <tr>
                                        <td>Налог на торговлю:</td>
                                        <td>@_sortedItems[index].Tax</td>
                                    </tr>
                                    <tr>
                                        <td>Тренд цены 90дней:</td>
                                            <td>@_sortedItems[index].ThreeMonthMetric</td>
                                    </tr>
                                    <tr>
                                        <td>Тренд цены 2дней:</td>
                                        <td>@_sortedItems[index].TwoDayMetric</td>
                                    </tr>
                                </tbody>
                            </table>
                            @* <p class="uk-text-normal"></p>
                            <p class="uk-text-normal">Цена продажи: @_sortedItems[index].SellValue</p>
                            <p class="uk-text-normal">Разница: @_sortedItems[index].Profit</p>
                            <p class="uk-text-normal">Ранг: @_sortedItems[index].Rank</p>
                            <p class="uk-text-normal">Налог на торговлю: @_sortedItems[index].Tax</p>
                            <p class="uk-text-normal">тренд цены: @_sortedItems[index].Trend</p>
                            <p class="uk-margin-left">90 дней: @_sortedItems[index].ThreeMonthMetric</p>
                            <p class="uk-margin-left">2 дня: @_sortedItems[index].TwoDayMetric</p> *@
                        </div>
                        <div>
                            <button class="uk-button uk-button-primary uk-align-center border-radius-small">
                                добавить
                            </button>
                        </div>
                    </div>
                </li>
            }

        </ul>
    </div>
</div>

@implements IDisposable
@code {
#pragma warning disable CS1998
    protected override async Task OnInitializedAsync()
    {
        _loadedItems = MockItemList.GenerateDemoItems(150);
        _ = AddItemsToSearch(_loadedItems);
        _sortedItems = _loadedItems.ToList(); // копирование для сортировки
    }
#pragma warning restore CS1998

    private List<DemoItem> _loadedItems = [];
    private List<DemoItem> _sortedItems = [];

    #region SearchFields

    private ItemFilter _itemFilter = new ItemFilter();
    private CancellationTokenSource _addManyItemsCancellationTokenSource = new();
    private CancellationTokenSource _searchFieldCancellationTokenSource = new();
    private BM25Searcher<DemoItem> demoItemMB25Searcher = new();

    private async Task AddItemsToSearch(IEnumerable<dynamic> items)
    {
        await _addManyItemsCancellationTokenSource.CancelAsync();
        _addManyItemsCancellationTokenSource = new();
        await demoItemMB25Searcher.AddItems(_loadedItems, _addManyItemsCancellationTokenSource.Token);

        _itemFilter.PropertyChanged += OnFilterPropertyChanged;
    }

    private async Task ApplyFilter(string query)
    {
        await _searchFieldCancellationTokenSource.CancelAsync();
        _searchFieldCancellationTokenSource = new();

        await Task.Delay(150);
        if (_searchFieldCancellationTokenSource.IsCancellationRequested)
            return;
        await Task.Delay(500);

        if (!string.IsNullOrEmpty(query))
            _sortedItems = await demoItemMB25Searcher.Search(query);
        else
            _sortedItems = _loadedItems;

        _sortedItems = _itemFilter.Apply(_sortedItems.AsQueryable()).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchFieldInput(ChangeEventArgs args)
    {
        if (args.Value is string query)
        {
            await ApplyFilter(query);
        }
    }

    #endregion SearchFields

    private void OnFilterPropertyChanged(string query)
    {
        _ = ApplyFilter(query);
    }

    void IDisposable.Dispose()
    {
        _itemFilter.PropertyChanged -= OnFilterPropertyChanged;
    }
}
